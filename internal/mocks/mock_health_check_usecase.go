// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seventeenthearth/sudal/internal/feature/health/application (interfaces: HealthCheckUseCase)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_health_check_usecase.go -package=mocks github.com/seventeenthearth/sudal/internal/feature/health/application HealthCheckUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/seventeenthearth/sudal/internal/feature/health/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockHealthCheckUseCase is a mock of HealthCheckUseCase interface.
type MockHealthCheckUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckUseCaseMockRecorder
	isgomock struct{}
}

// MockHealthCheckUseCaseMockRecorder is the mock recorder for MockHealthCheckUseCase.
type MockHealthCheckUseCaseMockRecorder struct {
	mock *MockHealthCheckUseCase
}

// NewMockHealthCheckUseCase creates a new mock instance.
func NewMockHealthCheckUseCase(ctrl *gomock.Controller) *MockHealthCheckUseCase {
	mock := &MockHealthCheckUseCase{ctrl: ctrl}
	mock.recorder = &MockHealthCheckUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckUseCase) EXPECT() *MockHealthCheckUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockHealthCheckUseCase) Execute(ctx context.Context) (*domain.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(*domain.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockHealthCheckUseCaseMockRecorder) Execute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockHealthCheckUseCase)(nil).Execute), ctx)
}
