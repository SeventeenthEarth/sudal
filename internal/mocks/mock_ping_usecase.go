// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seventeenthearth/sudal/internal/feature/health/application (interfaces: PingUseCase)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/seventeenthearth/sudal/internal/feature/health/domain"
)

// MockPingUseCase is a mock of PingUseCase interface.
type MockPingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPingUseCaseMockRecorder
}

// MockPingUseCaseMockRecorder is the mock recorder for MockPingUseCase.
type MockPingUseCaseMockRecorder struct {
	mock *MockPingUseCase
}

// NewMockPingUseCase creates a new mock instance.
func NewMockPingUseCase(ctrl *gomock.Controller) *MockPingUseCase {
	mock := &MockPingUseCase{ctrl: ctrl}
	mock.recorder = &MockPingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingUseCase) EXPECT() *MockPingUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockPingUseCase) Execute(arg0 context.Context) (*domain.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*domain.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockPingUseCaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockPingUseCase)(nil).Execute), arg0)
}
